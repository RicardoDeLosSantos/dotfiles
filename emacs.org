#+title: Emacs configuration

** Spacemacs configuration

This file is loaded by Spacemacs at startup. It must be stored in your home directory.

*** Configuration Layers declaration

You should not put any user code in this function besides modifying the variable values.

#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
(defun dotspacemacs/layers ()
  (setq-default
#+end_src

Base distribution to use. This is a layer contained in the directory `+distribution'. For now available distributions are `spacemacs-base' or `spacemacs'. (default 'spacemacs)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-distribution 'spacemacs-base
#+end_src

List of additional paths where to look for configuration layers. Paths must have a trailing slash (i.e. `~/.mycontribs/')
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-configuration-layer-path '()
#+end_src

List of configuration layers to load. If it is the symbol `all' (dotspacemacs-configuration-layers all) instead of a list then all discovered layers will be installed.
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-configuration-layers
   '(
     auto-completion
     emacs-lisp
     latex
     git
     org
     (shell :variables shell-default-height 30 shell-default-position 'bottom)
     (spell-checking :variables spell-checking-enable-by-default nil)
     syntax-checking
     spotify
     )
#+end_src
List of additional packages that will be installed without being wrapped in a layer. If you need some configuration for these packages then consider to create a layer, you can also put the configuration in `dotspacemacs/config'.
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-additional-packages '(
     jbeans-theme
     cdlatex
     org-ref
     pdf-tools
     vimish-fold
   )
#+end_src

A list of packages and/or extensions that will not be install and loaded.
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-excluded-packages '()
#+end_src

If non-nil spacemacs will delete any orphan packages, i.e. packages that are declared in a layer which is not a member of the list `dotspacemacs-configuration-layers'. (default t)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-delete-orphan-packages t
#+end_src

and finally, we close the function =(defun dotspacemacs/layers ()=
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
))
#+end_src

*** Initialization function

This function is called at the very startup of Spacemacs initialization before layers configuration. You should not put any user code in there besides modifying the variable values.

#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
(defun dotspacemacs/init ()
  (setq-default
#+end_src

If non nil ELPA repositories are contacted via HTTPS whenever it's possible. Set it to nil if you have no way to use HTTPS in your environment, otherwise it is strongly recommended to let it set to t. This variable has no effect if Emacs is launched with the parameter `--insecure' which forces the value of this variable to nil. (default t)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-elpa-https t
#+end_src

Maximum allowed time in seconds to contact an ELPA repository.
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-elpa-timeout 5
#+end_src

If non nil then spacemacs will check for updates at startup when the current branch is not `develop'. (default t)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-check-for-update t
#+end_src

One of `vim', `emacs' or `hybrid'. Evil is always enabled but if the variable is `emacs' then the `holy-mode' is enabled at startup. `hybrid' uses emacs key bindings for vim's insert mode, but otherwise leaves evil unchanged. (default 'vim)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-editing-style 'vim
#+end_src

If non nil output loading progress in `*Messages*' buffer. (default nil)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-verbose-loading t
#+end_src

Specify the startup banner. Default value is `official', it displays the official spacemacs logo. An integer value is the index of text banner, `random' chooses a random text banner in `core/banners' directory. A string value must be a path to an image format supported by your Emacs build. If the value is nil then no banner is displayed. (default 'official)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-startup-banner 'official
#+end_src

List of items to show in the startup buffer. If nil it is disabled. Possible values are: `recents' `bookmarks' `projects'. (default '(recents projects))
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-startup-lists '(recents projects)
#+end_src

Number of recent files to show in the startup buffer. Ignored if `dotspacemacs-startup-lists' doesn't include `recents'. (default 5)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-startup-recent-list-size 5
#+end_src

Default major mode of the scratch buffer (default `text-mode')
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-scratch-mode 'text-mode
#+end_src

List of themes, the first of the list is loaded when spacemacs starts. Press <SPC> T n to cycle to the next theme in the list (works great with 2 themes variants, one dark and one light)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-themes '(jbeans
                         spacemacs-dark
                         spacemacs-light
                         solarized-light
                         solarized-dark
                         leuven
                         monokai
                         zenburn)
#+end_src

If non nil the cursor color matches the state color.
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-colorize-cursor-according-to-state t
#+end_src

Default font. `powerline-scale' allows to quickly tweak the mode-line size to make separators look not too crappy.
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-default-font '("Source Code Pro"
                               :size 13
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
#+end_src

The leader key
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-leader-key "SPC"
#+end_src

The leader key accessible in `emacs state' and `insert state' (default "M-m")
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-emacs-leader-key "M-m"
#+end_src

Major mode leader key is a shortcut key which is the equivalent of pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-major-mode-leader-key ","
#+end_src

Major mode leader key accessible in `emacs state' and `insert state'. (default "C-M-m)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
#+end_src

These variables control whether separate commands are bound in the GUI to the key pairs C-i, TAB and C-m, RET. Setting it to a non-nil value, allows for separate commands under <C-i> and TAB or <C-m> and RET. In the terminal, these pairs are generally indistinguishable, so this only works in the GUI. (default nil)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-distinguish-gui-tab nil
#+end_src

The command key used for Evil commands (ex-commands) and Emacs commands (M-x). By default the command key is `:' so ex-commands are executed like in Vim with `:' and Emacs commands are executed with `<leader> :'.
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-command-key ":"
#+end_src

If non nil `Y' is remapped to `y$'. (default t)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-remap-Y-to-y$ t
#+end_src

Name of the default layout (default "Default")
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-default-layout-name "Default"
#+end_src

If non nil the default layout name is displayed in the mode-line. (default nil)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-display-default-layout nil
#+end_src

If non nil then the last auto saved layouts are resume automatically upon start. (default nil)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-auto-resume-layouts nil
#+end_src

Location where to auto-save files. Possible values are `original' to auto-save the file in-place, `cache' to auto-save the file to another file stored in the cache directory and `nil' to disable auto-saving. (default 'cache)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-auto-save-file-location 'cache
#+end_src

Maximum number of rollback slots to keep in the cache. (default 5)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-max-rollback-slots 5
#+end_src

If non nil then `ido' replaces `helm' for some commands. For now only `find-files' (SPC f f), `find-spacemacs-file' (SPC f e s), and `find-contrib-file' (SPC f e c) are replaced. (default nil)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-use-ido nil
#+end_src

If non nil, `helm' will try to miminimize the space it uses. (default nil)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-helm-resize nil
#+end_src

if non nil, the helm header is hidden when there is only one source. (default nil)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-helm-no-header nil
#+end_src

define the position to display `helm', options are `bottom', `top', `left', or `right'. (default 'bottom)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-helm-position 'bottom
#+end_src

If non nil the paste micro-state is enabled. When enabled pressing `p` several times cycle between the kill ring content. (default nil)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-enable-paste-micro-state nil
#+end_src

Which-key delay in seconds. The which-key buffer is the popup listing the commands bound to the current keystroke sequence. (default 0.4)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-which-key-delay 0.4
#+end_src

Which-key frame position. Possible values are `right', `bottom' and `right-then-bottom'. right-then-bottom tries to display the frame to the right; if there is insufficient space it displays it at the bottom. (default 'bottom)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-which-key-position 'bottom
#+end_src

If non nil a progress bar is displayed when spacemacs is loading. This may increase the boot time on some systems and emacs builds, set it to nil to boost the loading time. (default t)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-loading-progress-bar t
#+end_src

If non nil the frame is fullscreen when Emacs starts up. (default nil) (Emacs 24.4+ only)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-fullscreen-at-startup nil
#+end_src

If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen. Use to disable fullscreen animations in OSX. (default nil)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-fullscreen-use-non-native nil
#+end_src

If non nil the frame is maximized when Emacs starts up. Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil. (default nil) (Emacs 24.4+ only)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-maximized-at-startup nil
#+end_src

A value from the range (0..100), in increasing opacity, which describes the transparency level of a frame when it's active or selected. Transparency can be toggled through `toggle-transparency'. (default 90)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-active-transparency 90
#+end_src

A value from the range (0..100), in increasing opacity, which describes the transparency level of a frame when it's inactive or deselected. Transparency can be toggled through `toggle-transparency'. (default 90)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-inactive-transparency 50
#+end_src

If non nil unicode symbols are displayed in the mode line. (default t)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-mode-line-unicode-symbols t
#+end_src

If non nil smooth scrolling (native-scrolling) is enabled. Smooth scrolling overrides the default behavior of Emacs which recenters the point when it reaches the top or bottom of the screen. (default t)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-smooth-scrolling t
#+end_src

If non nil line numbers are turned on in all `prog-mode' and `text-mode' derivatives. If set to `relative', also turns on relative line numbers. (default nil)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-line-numbers nil
#+end_src

If non-nil smartparens-strict-mode will be enabled in programming modes. (default nil)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-smartparens-strict-mode nil
#+end_src

Select a scope to highlight delimiters. Possible values are `any', `current', `all' or `nil'. Default is `all' (highlight any scope and emphasis the current one). (default 'all)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-highlight-delimiters 'all
#+end_src

If non nil advises quit functions to keep server open when quitting. (default nil)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-persistent-server nil
#+end_src

List of search tool executable names. Spacemacs uses the first installed tool of the list. Supported tools are `ag', `pt', `ack' and `grep'. (default '("ag" "pt" "ack" "grep"))
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
#+end_src

The default package repository used if no explicit repository has been specified with an installed package. Not used for now. (default nil)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-default-package-repository nil
#+end_src

Delete whitespace while saving buffer. Possible values are `all' to aggressively delete empty line and long sequences of whitespace, `trailing' to delete only the whitespace at end of lines, `changed'to delete only whitespace for changed lines or `nil' to disable cleanup. (default nil)
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   dotspacemacs-whitespace-cleanup 'trailing
#+end_src

#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
   ))
#+end_src

*** Initialization function for user code

Initialization function for user code. It is called immediately after `dotspacemacs/init'.  You are free to put any user code.
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
(defun dotspacemacs/user-init ()
  )
#+end_src

*** Configuration function for user code

Configuration function for user code. This function is called at the very end of Spacemacs initialization after layers configuration. You are free to put any user code.

#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
(defun dotspacemacs/user-config ()
#+end_src

**** Add elisp script folder to emacs' PATH
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
  (add-to-list 'load-path "~/.elisp/")
  (let ((default-directory "~/.elisp/"))
    (normal-top-level-add-subdirs-to-load-path))
#+end_src
 
**** Command-line abbreviations

Nice abbreviations for people like me who forget sometimes and keep pressing Shift key while typing.
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
(eval-after-load 'evil-ex '(evil-ex-define-cmd "W[rite]" 'save-buffer))
(eval-after-load 'evil-ex '(evil-ex-define-cmd "Wq" 'evil-save-and-close))
(eval-after-load 'evil-ex '(evil-ex-define-cmd "wQ" 'evil-save-and-close))
(eval-after-load 'evil-ex '(evil-ex-define-cmd "WQ" 'evil-save-and-close))
#+end_src
**** Auto-mode-alist
 Make org-mode work with files ending in .org
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
  (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
#+end_src
**** Fringe indicators for visual line mode
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
(setq visual-line-fringe-indicators
  '(left-curly-arrow right-curly-arrow))
#+end_src

**** pdf-tools

Activate pdf-tools
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
(pdf-tools-install)
#+end_src

**** mu4e configuration 

First we load mu4e
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
  (require 'mu4e)
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
#+end_src
and then we configure it:
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
  (with-eval-after-load 'mu4e
    ;; Contacts in org mode =D
    (load "org-contacts.el")

    (setq mu4e-mu-binary "/usr/bin/mu")
    (setq mu4e-maildir "~/.mail/gmail")
    (setq mu4e-view-show-images t)
    (setq mu4e-html2text-command "w3m -dump -T text/html")
    ;(setq mu4e-view-prefer-html t)
    ;(setq mu4e-use-fancy-chars t)
    (setq mu4e-headers-skip-duplicates t)
    (setq mu4e-get-mail-command "offlineimap -q")
    (setq mu4e-update-interval 300)
    (setq mu4e-attachment-dir  "~/0.inbox")
    (setq mu4e-drafts-folder "/drafts")
    (setq mu4e-sent-folder   "/sent")
    (setq mu4e-trash-folder  "/trash")
    (setq mu4e-sent-messages-behavior 'delete)
    (setq message-kill-buffer-on-exit t)
    (setq mu4e-hide-index-messages t)
    (setq
     user-mail-address "victor.phb@gmail.com"
     user-full-name  "Victor Santos"
     mu4e-compose-signature
     (concat
      "vct\n"))

    ;; smtpmail
    (require 'smtpmail)
    (require 'starttls)
    (setq message-send-mail-function 'smtpmail-send-it
          smtpmail-stream-type 'starttls
          smtpmail-smtp-service 587
          smtpmail-default-smtp-server "smtp.gmail.com"
          smtpmail-smtp-server "smtp.gmail.com"
          smtpmail-smtp-user "victor.phb@gmail.com")
    ;(setq starttls-extra-arguments '("--x509cafile" "/usr/pkg/share/ncat/ca-bundle.crt"))

    (defun vct:mail-compose-hooks ()
      "Settings for message composition."
      (flyspell-mode)
      (turn-off-auto-fill)
      (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
      (visual-line-mode 1))

    (add-hook 'mu4e-compose-mode-hook 'vct:mail-compose-hooks)
    (add-hook 'message-mode-hook 'vct:mail-compose-hooks)

    (setq org-contacts-files '("~/1.documents/0.annotations/0.organizer.org"))
    (setq mu4e-org-contacts-file  "~/1.documents/0.annotations/0.organizer.org")

    (defun insert-emails-from-tags (tag-expression)
      "insert emails from org-contacts that match the tags expression. For example:
    group-phd will match entries tagged with group but not with phd."
      (interactive "sTags: ")
      (insert
        (mapconcat 'identity
          (loop for contact in (org-contacts-filter)
            for contact-name = (car contact)
    		  for email = (org-contacts-strip-link (car (org-contacts-split-property
                (or
                  (cdr (assoc-string org-contacts-email-property
                    (caddr contact)))
                      ""))))
                    for tags = (cdr (assoc "TAGS" (nth 2 contact)))
    		          for tags-list = (if tags
    					(split-string (substring (cdr (assoc "TAGS" (nth 2 contact))) 1 -1) ":")
    				      '())
    		    if (let ((todo-only nil))
    			 (eval (cdr (org-make-tags-matcher tag-expression))))
    		    collect (org-contacts-format-email contact-name email))
    	      ",")))

  )
#+end_src

**** Org-mode configuration
***** Hooks
Enable visual line mode
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
  (add-hook 'org-mode-hook 'visual-line-mode)
#+end_src

Speedup insertion of LaTeX environments
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
  (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
#+end_src
***** Update dynamic blocks
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
  (defun org-dblock-write:inc-file (params)
    (let ((file (plist-get params :file)))
      (insert (concat "#+INCLUDE: " (get-path-dynamically)))))
  (add-hook 'org-export-before-processing-hook (lambda (backend) (org-update-all-dblocks)))
#+end_src

***** Fix visual lines navigation

I got this solution [[https://github.com/syl20bnr/spacemacs/pull/1446][here]]. Make evil-mode up/down operate in screen lines instead of logical lines, both in normal state and visual mode.
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
  (define-key evil-normal-state-map "j" 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "<down>" ) 'evil-next-visual-line)
  (define-key evil-normal-state-map "k" 'evil-previous-visual-line)
  (define-key evil-normal-state-map (kbd "<up>" ) 'evil-previous-visual-line)
  (define-key evil-visual-state-map "j" 'evil-next-visual-line)
  (define-key evil-visual-state-map (kbd "<down>" ) 'evil-next-visual-line)
  (define-key evil-visual-state-map "k" 'evil-previous-visual-line)
  (define-key evil-visual-state-map (kbd "<up>" ) 'evil-previous-visual-line)
#+end_src

***** Configuration after load org-mode

#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
  (with-eval-after-load 'org
#+end_src

Use this at your risk! I'm NOT conservative regarding local file variable, as I always know the code I'll be executing.
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
    (setq enable-local-variables :all)
#+end_src

Partial LaTeX syntax highlighting in org-mode buffers
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
    (font-lock-add-keywords 'org-mode
      '(("\\(\\\\begin\\|\\\\end\\)\\(?:\{\\)\\(.*\\)\\(?:\}\\)"
         (1 'font-lock-keyword-face)
         (2 'font-lock-function-name-face))
        ("\\(\\\\eqref\\|\\\\ref\\|\\\\href\\|\\\\label\\)\\(?:\{\\)\\(.*\\)\\(?:\}\\)"
         (1 'font-lock-keyword-face)
         (2 'font-lock-constant-face))
        ("\\(\\\\textrm\\|\\\\frac\\)"
         (1 'font-lock-keyword-face))))
#+end_src

Bigger LaTeX previews
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
    (plist-put org-format-latex-options :scale 1.5)
#+end_src

org-ref configuration
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
    (require 'org-ref)
    (setq org-ref-default-citation-link "eqref")
#+end_src

Limit the size of picture preview
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
    (setq org-image-actual-width 300)
#+end_src

Change ltxpng folder location for LaTeX previews
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
    (setq org-latex-preview-ltxpng-directory "~/.ltxpng/")
#+end_src

CDLaTex configuration
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
      (setq cdlatex-env-alist
        '(
          ("vct-eqn" "\\begin{equation}\n?\n\\end{equation}\n" nil)
          ("vct-alg" "\\begin{align}\n?\n\\end{align}\n" nil)
         )
      )
      (setq cdlatex-command-alist
        '(
          ("equation" "Insert non-labeled equation" "" cdlatex-environment ("vct-eqn") t nil)
          ("equat" "Insert non-labeled equation" "" cdlatex-environment ("vct-eqn") t nil)
          ("align" "Insert non-labeled align" "" cdlatex-environment ("vct-alg") t nil)
          ("alig" "Insert non-labeled align" "" cdlatex-environment ("vct-alg") t nil)
         )
      )
#+end_src

This makes my life easier when typesetting tensors using abstract index notation
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
      (setq cdlatex-math-symbol-alist '((?p ("\\phantom{?}"))))
#+end_src

Uses latexmk for exporting
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
      (setq org-latex-pdf-process '("latexmk -pdf %f"))
#+end_src

For site exporting
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
      (require 'ox-publish)
      (setq org-publish-project-alist
        '(("wiki" :components ("org-index" "images" "org-posts" "other"))
         ("org-posts"
         :publishing-function org-html-publish-to-html
         :headline-levels 4 ; Default for this project
         ;:auto-sitemap t ; Generate sitemap.org automagically...
         ;:sitemap-filename "sitemap.org" ; ...call it `sitemap.org`...
         ;:sitemap-title "Sitemap" ; ...with title `Sitemap`
         :export-creator-info t ; Include `Created by Org` in the postamble
         :export-author-info t ; Include `Author: Your name` in the postamble
         :html-postamble nil ; enable postamble
         :html-preamble nil
         :base-directory "~/1.documents/0.annotations"
         :exclude: "0.organizer.org"
         :base-extension "org"
         :publishing-directory "~/public_html/posts"
         :recursive t
         :section-numbers nil
         :with-toc nil
         :with-drawers t
         :style-include-default t  ;Disable the default css style
         )
         ("org-index"
         :publishing-function org-html-publish-to-html
         :headline-levels 4 ; Default for this project
         :auto-sitemap t ; Generate sitemap.org automagically...
         :sitemap-filename "sitemap.org" ; ...call it `sitemap.org`...
         :sitemap-title "Sitemap" ; ...with title `Sitemap`
         :export-creator-info t ; Include `Created by Org` in the postamble
         :export-author-info t ; Include `Author: Your name` in the postamble
         :html-postamble nil ; enable postamble
         :html-preamble nil
         :base-directory "~/wiki"
         :exclude: "common.inc.org"
         :base-extension "org"
         :publishing-directory "~/public_html"
         :recursive t
         :section-numbers nil
         :with-toc nil
         :with-drawers t
         :style-include-default t  ;Disable the default css style
         )
        ("images"
         :base-directory "~/1.documents/0.annotations/0.figures"
         :base-extension "png\\|jpg\\|gif"
         :publishing-directory "~/public_html/img"
         :recursive t
         :publishing-function org-publish-attachment
         :section-numbers nil
         )
        ("other"
         :base-directory "~/wiki"
         :base-extension "css\\|js"
         :publishing-directory "~/public_html"
         :recursive t
         :publishing-function org-publish-attachment
         :section-numbers nil
         )
        ))
#+end_src
For ignore_headline tag
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
      (require 'ox-extra)
      (ox-extras-activate '(ignore-headlines))
#+end_src

Closing =with-eval-after-load 'org=
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
)
#+end_src
**** LaTeX configuration 
Normal font size in AUCTeX titles
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
  (setq font-latex-fontify-sectioning 'color)
#+end_src

Closing =defun dotspacemacs/user-config=
#+begin_src emacs-lisp :tangle emacs/.spacemacs :padline no
)
#+end_src

** Custom elisp folder
*** Org-mode LaTeX custom classes
**** JCAP class
#+begin_src emacs-lisp :tangle emacs/.elisp/jcap.el
(require 'ox-latex)
(unless (boundp 'org-latex-classes) (setq org-latex-classes nil))
(add-to-list 'org-latex-classes '("jcap"
"\\documentclass[11pt,a4paper]{article}
\\usepackage{jcappub}
\\usepackage{float} % Useful for right positioning of figures and tables
[NO-DEFAULT-PACKAGES]
[PACKAGES]
[EXTRA]"
("\\section{%s}" . "\\section*{%s}")
("\\subsection{%s}" . "\\subsection*{%s}")
("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
#+end_src
**** Article draft
#+begin_src emacs-lisp :tangle emacs/.elisp/org-article-draft.el
(require 'ox-latex)
(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))
(add-to-list 'org-latex-classes
  '("org-article-draft"
"\\documentclass[12pt,a4paper]{article}
% Language and geometry
\\usepackage[english]{babel}
\\usepackage[top=2.5cm,bottom=2.5cm,left=2.5cm,right=2.5cm]{geometry}
% Set link colors (from http://tex.stackexchange.com/questions/100905/best-practice-for-hyperref-link-colours)
\\usepackage[dvipsnames]{xcolor}
\\usepackage{hyperref}
\\usepackage{cleveref}
\\newcommand\\myshade{85}
\\colorlet{mylinkcolor}{violet}
\\colorlet{mycitecolor}{YellowOrange}
\\colorlet{myurlcolor}{Aquamarine}
\\hypersetup{
  linkcolor  = mylinkcolor!\\myshade!black,
  citecolor  = mycitecolor!\\myshade!black,
  urlcolor   = myurlcolor!\\myshade!black,
  colorlinks = true
}
\\usepackage{float} % Useful for right positioning of figures and tables
% Math packages
\\usepackage{amsmath,amssymb,amsfonts,amsthm}
% For include figures
\\usepackage{graphicx}
[NO-DEFAULT-PACKAGES]
[PACKAGES]
[EXTRA]"
  ("\\section{%s}" . "\\section*{%s}")
  ("\\subsection{%s}" . "\\subsection*{%s}")
  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  ("\\paragraph{%s}" . "\\paragraph*{%s}")
  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src
**** RevTeX
#+begin_src emacs-lisp :tangle emacs/.elisp/revtex.el
(require 'ox-latex)

;(defun org-export-latex-no-toc (depth)
;  (when depth
;    (format "%% Org-mode is exporting headings to %s levels.\n"
;            depth)))

;(setq org-export-latex-format-toc-function 'org-export-latex-no-toc)

(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))

(add-to-list 'org-latex-classes
       '("revtex"
         "\\documentclass{revtex4-1}
\\usepackage[english]{babel}
\\usepackage[utf8]{inputenc}
\\usepackage[T1]{fontenc}
\\usepackage{amsmath,amssymb,amsfonts,amsthm,amssymb,amsbsy,amsopn,amstext}
\\usepackage[mathcal]{eucal}
\\usepackage{mathrsfs}
\\usepackage{latexsym}
\\usepackage{bm}
\\usepackage{wrapfig}
\\usepackage{color}
\\usepackage{units}
\\usepackage{textcomp}
\\usepackage{graphicx}
\\usepackage{subfigure}
\\usepackage{hyperref}
\\usepackage{slashed}
\\usepackage{float} % Useful for right positioning of figures and tables
[NO-DEFAULT-PACKAGES]
[NO-PACKAGES]
[NO-EXTRA]"
("\\section{%s}" . "\\section*{%s}")
("\\subsection{%s}" . "\\subsection*{%s}")
("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

(setq org-latex-title-command "")
(setq org-latex-with-hyperref nil)

(defun vct/remove-title-date (string backend info)
  "Remove the \date{XXX} and \title{XXX} commands before the \begin{document}...\end{document}"
  (when (org-export-derived-backend-p backend 'latex)
    (message "Removing \date and \title from preamble...")
    (let ((case-fold-search nil))
      (goto-char 1)
      (replace-regexp-in-string "\\\\date{[0-9a-zA-Z\\][^}]*}" "" (replace-regexp-in-string "\\\\title{[0-9a-zA-Z][^}]*}" "" string))
    )))

(eval-after-load 'ox-latex
  '(add-to-list 'org-export-filter-final-output-functions 'vct/remove-title-date))
#+end_src
**** Org-mode CV
#+begin_src emacs-lisp :tangle emacs/.elisp/revtex.el
(require 'ox-latex)
(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))
(add-to-list 'org-latex-classes
  '("vct-orgmode-latex-cv"
"\\documentclass[11pt,a4paper]{article}
\\usepackage[utf8]{inputenc}
\\usepackage[T1]{fontenc}
% Language and geometry
\\usepackage[brazil,english]{babel}
\\usepackage[top=2.5cm,bottom=2.5cm,left=2.5cm,right=2.5cm]{geometry}
% Set link colors (from http://tex.stackexchange.com/questions/100905/best-practice-for-hyperref-link-colours)
\\usepackage[dvipsnames]{xcolor}
\\usepackage{hyperref}
\\usepackage{cleveref}
\\newcommand\\myshade{85}
\\colorlet{mylinkcolor}{violet}
\\colorlet{mycitecolor}{YellowOrange}
\\colorlet{myurlcolor}{Aquamarine}
\\hypersetup{
  linkcolor  = mylinkcolor!\\myshade!black,
  citecolor  = mycitecolor!\\myshade!black,
  urlcolor   = myurlcolor!\\myshade!black,
  colorlinks = true
}
\\usepackage{float} % Useful for right positioning of figures and tables
% Math packages
\\usepackage{amsmath,amssymb,amsfonts,amsthm}
% For include figures
\\usepackage{graphicx}
% CV formatting
\\usepackage{vct-orgmode-cv}
[NO-DEFAULT-PACKAGES]
[PACKAGES]
[EXTRA]"
  ("\\begin{flushleft}\\textcolor{red}{%s}\\end{flushleft}" . "")
  ("\\section{%s}" . "\\section*{%s}")
  ("\\subsection{%s}" . "\\subsection*{%s}")
  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  ("\\paragraph{%s}" . "\\paragraph*{%s}")
  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src
*** org -> HTML conversion in e-mails
#+begin_src emacs-lisp :tangle emacs/.elisp/org-mime.el
;;; org-mime.el --- org html export for text/html MIME emails

;; Copyright (C) 2010-2015 Eric Schulte

;; Author: Eric Schulte
;; Keywords: mime, mail, email, html
;; Homepage: http://orgmode.org/worg/org-contrib/org-mime.php
;; Version: 0.01

;; This file is not part of GNU Emacs.

;;; License:

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3, or (at your option)
;; any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; WYSWYG, html mime composition using org-mode
;;
;; For mail composed using the orgstruct-mode minor mode, this
;; provides a function for converting all or part of your mail buffer
;; to embedded html as exported by org-mode.  Call \omegarg-mime-htmlize'
;; in a message buffer to convert either the active region or the
;; entire buffer to html.
;;
;; Similarly the \omegarg-mime-org-buffer-htmlize' function can be called
;; from within an org-mode buffer to convert the buffer to html, and
;; package the results into an email handling with appropriate MIME
;; encoding.
;;
;; you might want to bind this to a key with something like the
;; following message-mode binding
;;
;;   (add-hook 'message-mode-hook
;;             (lambda ()
;;               (local-set-key "\C-c\M-o" 'org-mime-htmlize)))
;;
;; and the following org-mode binding
;;
;;   (add-hook 'org-mode-hook
;;             (lambda ()
;;               (local-set-key "\C-c\M-o" 'org-mime-org-buffer-htmlize)))

;;; Code:
(require 'cl)

(declare-function org-export-string-as "ox"
  (string backend &optional body-only ext-plist))

(defcustom org-mime-use-property-inheritance nil
  "Non-nil means al MAIL_ properties apply also for sublevels."
  :group 'org-mime
  :type 'boolean)

(defcustom org-mime-default-header
  "#+OPTIONS: latex:t\n"
  "Default header to control html export options, and ensure
  first line isn't assumed to be a title line."
  :group 'org-mime
  :type 'string)

(defcustom org-mime-library 'mml
  "Library to use for marking up MIME elements."
  :group 'org-mime
  :type '(choice 'mml 'semi 'vm))

(defcustom org-mime-preserve-breaks t
  "Used as temporary value of \omegarg-export-preserve-breaks' during
  mime encoding."
  :group 'org-mime
  :type 'boolean)

(defcustom org-mime-fixedwith-wrap
  "<pre style=\"font-family: courier, monospace;\">\n%s</pre>\n"
  "Format string used to wrap a fixedwidth HTML email."
  :group 'org-mime
  :type 'string)

(defcustom org-mime-html-hook nil
  "Hook to run over the html buffer before attachment to email.
  This could be used for example to post-process html elements."
  :group 'org-mime
  :type 'hook)

(mapc (lambda (fmt)
(eval \langledefcustom
 ,(intern (concat "org-mime-pre-" fmt "-hook"))
  nil
   (concat "Hook to run before " fmt " export.\nFunctions "
    "should take no arguments and will be run in a "
     "buffer holding\nthe text to be exported."))))
      '("ascii" "org" "html"))

(defcustom org-mime-send-subtree-hook nil
  "Hook to run in the subtree in the Org-mode file before export.")

(defcustom org-mime-send-buffer-hook nil
  "Hook to run in the Org-mode file before export.")

;; example hook, for setting a dark background in <pre style="background-color: #EEE;"> elements
(defun org-mime-change-element-style (element style)
  "Set new default htlm style for <ELEMENT> elements in exported html."
  (while (re-search-forward (format "<%s\\>" element) nil t)
    (replace-match (format "<%s style=\"%s\"" element style))))

(defun org-mime-change-class-style (class style)
  "Set new default htlm style for objects with classs=CLASS in
exported html."
  (while (re-search-forward (format "class=\"%s\"" class) nil t)
    (replace-match (format "class=\"%s\" style=\"%s\"" class style))))

;; ;; example addition to \omegarg-mime-html-hook' adding a dark background
;; ;; color to <pre> elements
;; (add-hook 'org-mime-html-hook
;;           (lambda ()
;;             (org-mime-change-element-style
;;              "pre" (format "color: %s; background-color: %s;"
;;                            "#E6E1DC" "#232323"))
;;     (org-mime-change-class-style
;;              "verse" "border-left: 2px solid gray; padding-left: 4px;")))

(defun org-mime-file (ext path id)
  "Markup a file for attachment."
  (case org-mime-library
    ('mml (format (concat "<#part type=\"%s\" filename=\"%s\" "
      "disposition=inline id=\"<%s>\">\n<#/part>\n")
        ext path id))
    ('semi (concat
            (format (concat "--[[%s\nContent-Disposition: "
                "inline;\nContent-ID: <%s>][base64]]\n")
                    ext id)
            (base64-encode-string
             (with-temp-buffer
               (set-buffer-multibyte nil)
               (binary-insert-encoded-file path)
               (buffer-string)))))
    ('vm "?")))

(defun org-mime-multipart (plain html &optional images)
  "Markup a multipart/alternative with text/plain and text/html alternatives.
If the html portion of the message includes images wrap the html
and images in a multipart/related part."
  (case org-mime-library
    ('mml (concat "<#multipart type=alternative><#part type=text/plain>"
      plain
        (when images "<#multipart type=related>")
          "<#part type=text/html>"
            html
              images
                (when images "<#/multipart>\n")
                  "<#/multipart>\n"))
    ('semi (concat
            "--" "<<alternative>>-{\n"
            "--" "[[text/plain]]\n" plain
                (if (and images (> (length images) 0))
                (concat "--" "<<related>>-{\n"
                "--" "[[text/html]]\n"  html
                images
                "--" "}-<<related>>\n")
                      (concat "--" "[[text/html]]\n"  html
                            images))
            "--" "}-<<alternative>>\n"))
    ('vm "?")))

(defun org-mime-replace-images (str current-file)
  "Replace images in html files with cid links."
  (let (html-images)
    (cons
     (replace-regexp-in-string ;; replace images in html
      "src=\"\\([^{\"]+\\)\""
      (lambda (text)
        (format
         "src=\"cid:%s\""
         (let* ((url (and (string-match "src=\"\\([^{\"]+\\)\"" text)
                          (match-string 1 text)))
                (path (expand-file-name
                       url (file-name-directory current-file)))
                (ext (file-name-extension path))
                (id (replace-regexp-in-string "[\/\\\\]" "_" path)))
           (add-to-list 'html-images
                        (org-mime-file (concat "image/" ext) path id))
           id)))
      str)
     html-images)))

(defun org-mime-htmlize (&optional arg)
  "Export to HTML an email body composed using \muml-mode'.
If called with an active region only export that region,
otherwise export the entire body."
  (interactive "P")
  (require 'ox-org)
  (require 'ox-html)
  (let* ((region-p (org-region-active-p))
         (html-start (or (and region-p (region-beginning))
                         (save-excursion
                           (goto-char (point-min))
                           (search-forward mail-header-separator)
                           (+ (point) 1))))
         (html-end (or (and region-p (region-end))
                       ;; TODO: should catch signature...
                       (point-max)))
         (raw-body (concat org-mime-default-header
            (buffer-substring html-start html-end)))
         (tmp-file (make-temp-name (expand-file-name
             "mail" temporary-file-directory)))
         (body (org-export-string-as raw-body 'org t))
         ;; because we probably don't want to export a huge style file
         (org-export-htmlize-output-type 'inline-css)
         ;; makes the replies with ">"s look nicer
         (org-export-preserve-breaks org-mime-preserve-breaks)
          ;; dvipng for inline latex because MathJax doesn't work in mail
           (org-html-with-latex 'dvipng)
         ;; to hold attachments for inline html images
         (html-and-images
          (org-mime-replace-images
             (org-export-string-as raw-body 'html t) tmp-file))
         (html-images (unless arg (cdr html-and-images)))
         (html (org-mime-apply-html-hook
                (if arg
                    (format org-mime-fixedwith-wrap body)
                  (car html-and-images)))))
    (delete-region html-start html-end)
    (save-excursion
      (goto-char html-start)
      (insert (org-mime-multipart
             body html (mapconcat 'identity html-images "\n"))))))

(defun org-mime-apply-html-hook (html)
  (if org-mime-html-hook
      (with-temp-buffer
        (insert html)
        (goto-char (point-min))
        (run-hooks 'org-mime-html-hook)
        (buffer-string))
    html))

(defmacro org-mime-try (&rest body)
  \langlecondition-case nil ,@body (error nil)))

(defun org-mime-send-subtree (&optional fmt)
  (save-restriction
    (org-narrow-to-subtree)
    (run-hooks 'org-mime-send-subtree-hook)
    (let* ((mp (lambda (p) (org-entry-get nil p org-mime-use-property-inheritance)))
       (file (buffer-file-name (current-buffer)))
          (subject (or (funcall mp "MAIL_SUBJECT") (nth 4 (org-heading-components))))
             (to (funcall mp "MAIL_TO"))
                (cc (funcall mp "MAIL_CC"))
                   (bcc (funcall mp "MAIL_BCC"))
                      (body (buffer-substring
                        (save-excursion (goto-char (point-min))
                          (forward-line 1)
                            (when (looking-at "[ \t]*:PROPERTIES:")
                                (re-search-forward ":END:" nil)
                                    (forward-char))
                                      (point))
                                        (point-max))))
      (org-mime-compose body (or fmt 'org) file to subject
      \langle(cc . ,cc) (bcc . ,bcc))))))

(defun org-mime-send-buffer (&optional fmt)
  (run-hooks 'org-mime-send-buffer-hook)
  (let* ((region-p (org-region-active-p))
   (file (buffer-file-name (current-buffer)))
    (subject (if (not file) (buffer-name (buffer-base-buffer))
       (file-name-sans-extension
           (file-name-nondirectory file))))
         (body-start (or (and region-p (region-beginning))
                         (save-excursion (goto-char (point-min)))))
         (body-end (or (and region-p (region-end)) (point-max)))
          (temp-body-file (make-temp-file "org-mime-export"))
           (body (buffer-substring body-start body-end)))
    (org-mime-compose body (or fmt 'org) file nil subject)))

(defun org-mime-compose (body fmt file &optional to subject headers)
  (require 'message)
  (compose-mail to subject headers nil)
  (message-goto-body)
  (let ((bhook
   (lambda (body fmt)
      (let ((hook (intern (concat "org-mime-pre-"
             (symbol-name fmt)
                    "-hook"))))
                         (if (> (eval \langlelength ,hook)) 0)
                          (with-temp-buffer
                             (insert body)
                                (goto-char (point-min))
                                   (eval \langlerun-hooks ',hook))
                                      (buffer-string))
                                             body))))
                                             (fmt (if (symbolp fmt) fmt (intern fmt))))
    (cond
     ((eq fmt 'org)
      (require 'ox-org)
      (insert (org-export-string-as
             (org-babel-trim (funcall bhook body 'org)) 'org t)))
     ((eq fmt 'ascii)
      (require 'ox-ascii)
      (insert (org-export-string-as
             (concat "#+Title:\n" (funcall bhook body 'ascii)) 'ascii t)))
     ((or (eq fmt 'html) (eq fmt 'html-ascii))
      (require 'ox-ascii)
      (require 'ox-org)
      (let* ((org-link-file-path-type 'absolute)
           ;; we probably don't want to export a huge style file
                (org-export-htmlize-output-type 'inline-css)
                     (html-and-images
                           (org-mime-replace-images
                                  (org-export-string-as (funcall bhook body 'html) 'html t) file))
                                       (images (cdr html-and-images))
                                            (html (org-mime-apply-html-hook (car html-and-images))))
                                            (insert (org-mime-multipart
                                             (org-export-string-as
                                               (org-babel-trim
                                                  (funcall bhook body (if (eq fmt 'html) 'org 'ascii)))
                                                    (if (eq fmt 'html) 'org 'ascii) t)
                                                     html)
                                                     (mapconcat 'identity images "\n")))))))

(defun org-mime-org-buffer-htmlize ()
  "Create an email buffer containing the current org-mode file
  exported to html and encoded in both html and in org formats as
  mime alternatives."
  (interactive)
  (org-mime-send-buffer 'html))

(defun org-mime-subtree ()
  "Create an email buffer containing the current org-mode subtree
  exported to a org format or to the format specified by the
  MAIL_FMT property of the subtree."
  (interactive)
  (org-mime-send-subtree
   (or (org-entry-get nil "MAIL_FMT" org-mime-use-property-inheritance) 'org)))

(provide 'org-mime)
#+end_src
*** Contacts in org-mode 
from [[https://julien.danjou.info/projects/emacs-packages#org-contacts][here]]
#+begin_src emacs-lisp :tangle emacs/.elisp/org-contacts.el
;;; org-contacts.el --- Contacts management

;; Copyright (C) 2010-2014 Julien Danjou <julien@danjou.info>

;; Author: Julien Danjou <julien@danjou.info>
;; Keywords: outlines, hypermedia, calendar
;;
;; This file is NOT part of GNU Emacs.
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Commentary:

;; This file contains the code for managing your contacts into Org-mode.

;; To enter new contacts, you can use \omegarg-capture' and a minimal template just like
;; this:

;;         ("c" "Contacts" entry (file "~/Org/contacts.org")
;;          "* %(org-contacts-template-name)
;; :PROPERTIES:
;; :EMAIL: %(org-contacts-template-email)
;; :END:")))
;;
;; You can also use a complex template, for example:
;;
;;         ("c" "Contacts" entry (file "~/Org/contacts.org")
;;          "* %(org-contacts-template-name)
;; :PROPERTIES:
;; :EMAIL: %(org-contacts-template-email)
;; :PHONE:
;; :ALIAS:
;; :NICKNAME:
;; :IGNORE:
;; :ICON:
;; :NOTE:
;; :ADDRESS:
;; :BIRTHDAY:
;; :END:")))
;;
;;; Code:

(eval-when-compile
  (require 'cl))

(require 'org)
(require 'gnus-util)
(require 'gnus-art)
(require 'mail-utils)
(require 'org-agenda)
(require 'org-capture)

(defgroup org-contacts nil
  "Options about contacts management."
  :group 'org)

(defcustom org-contacts-files nil
  "List of Org files to use as contacts source.
When set to nil, all your Org files will be used."
  :type '(repeat file)
  :group 'org-contacts)

(defcustom org-contacts-email-property "EMAIL"
  "Name of the property for contact email address."
  :type 'string
  :group 'org-contacts)

(defcustom org-contacts-tel-property "PHONE"
  "Name of the property for contact phone number."
  :type 'string
  :group 'org-contacts)

(defcustom org-contacts-address-property "ADDRESS"
  "Name of the property for contact address."
  :type 'string
  :group 'org-contacts)

(defcustom org-contacts-birthday-property "BIRTHDAY"
  "Name of the property for contact birthday date."
  :type 'string
  :group 'org-contacts)

(defcustom org-contacts-note-property "NOTE"
  "Name of the property for contact note."
  :type 'string
  :group 'org-contacts)

(defcustom org-contacts-alias-property "ALIAS"
  "Name of the property for contact name alias."
  :type 'string
  :group 'org-contacts)

(defcustom org-contacts-ignore-property "IGNORE"
  "Name of the property, which values will be ignored when
completing or exporting to vcard."
  :type 'string
  :group 'org-contacts)


(defcustom org-contacts-birthday-format "Birthday: %l (%Y)"
  "Format of the anniversary agenda entry.
The following replacements are available:

  %h - Heading name
  %l - Link to the heading
  %y - Number of year
  %Y - Number of year (ordinal)"
  :type 'string
  :group 'org-contacts)

(defcustom org-contacts-last-read-mail-property "LAST_READ_MAIL"
  "Name of the property for contact last read email link storage."
  :type 'string
  :group 'org-contacts)

(defcustom org-contacts-icon-property "ICON"
  "Name of the property for contact icon."
  :type 'string
  :group 'org-contacts)

(defcustom org-contacts-nickname-property "NICKNAME"
  "Name of the property for IRC nickname match."
  :type 'string
  :group 'org-contacts)

(defcustom org-contacts-icon-size 32
  "Size of the contacts icons."
  :type 'string
  :group 'org-contacts)

(defcustom org-contacts-icon-use-gravatar (fboundp 'gravatar-retrieve)
  "Whether use Gravatar to fetch contact icons."
  :type 'boolean
  :group 'org-contacts)

(defcustom org-contacts-completion-ignore-case t
  "Ignore case when completing contacts."
  :type 'boolean
  :group 'org-contacts)

(defcustom org-contacts-group-prefix "+"
  "Group prefix."
  :type 'string
  :group 'org-contacts)

(defcustom org-contacts-tags-props-prefix "#"
  "Tags and properties prefix."
  :type 'string
  :group 'org-contacts)

(defcustom org-contacts-matcher
  (mapconcat 'identity (list org-contacts-email-property
       org-contacts-alias-property
            org-contacts-tel-property
                 org-contacts-address-property
                      org-contacts-birthday-property)
                           "<>\"\"|")
  "Matching rule for finding heading that are contacts.
This can be a tag name, or a property check."
  :type 'string
  :group 'org-contacts)

(defcustom org-contacts-email-link-description-format "%s (%d)"
  "Format used to store links to email.
This overrides \omegarg-email-link-description-format' if set."
  :group 'org-contacts
  :type 'string)

(defcustom org-contacts-vcard-file "contacts.vcf"
  "Default file for vcard export."
  :group 'org-contacts
  :type 'file)

(defcustom org-contacts-enable-completion t
  "Enable or not the completion in \muessage-mode' with \omegarg-contacts'."
  :group 'org-contacts
  :type 'boolean)

(defcustom org-contacts-complete-functions
  '(org-contacts-complete-group org-contacts-complete-tags-props org-contacts-complete-name)
  "List of functions used to complete contacts in \muessage-mode'."
  :group 'org-contacts
  :type 'hook)

;; Decalre external functions and variables
(declare-function org-reverse-string "org")
(declare-function diary-ordinal-suffix "ext:diary-lib")
(declare-function wl-summary-message-number "ext:wl-summary")
(declare-function wl-address-header-extract-address "ext:wl-address")
(declare-function wl-address-header-extract-realname "ext:wl-address")
(declare-function erc-buffer-list "ext:erc")
(declare-function erc-get-channel-user-list "ext:erc")
(declare-function google-maps-static-show "ext:google-maps-static")
(declare-function elmo-message-field "ext:elmo-pipe")
(declare-function std11-narrow-to-header "ext:std11")
(declare-function std11-fetch-field "ext:std11")

(defconst org-contacts-property-values-separators "[,; \f\t\n\r\v]+"
  "The default value of separators for \omegarg-contacts-split-property'.

A regexp matching strings of whitespace, 0 (length org-contacts-files)))
    (i 0))
    (dolist (file (org-contacts-files))
      (if (catch 'nextfile
                ;; if file doesn't exist and the user agrees to removing it
                ;; from org-agendas-list, 'nextfile is thrown.  Catch it here
                ;; and skip processing the file.
                ;;
                ;; TODO: suppose that the user has set an org-contacts-files
                ;; list that contains an element that doesn't exist in the
                ;; file system: in that case, the org-agenda-files list could
                ;; be updated (and saved to the customizations of the user) if
                ;; it contained the same file even though the org-agenda-files
                ;; list wasn't actually used.  I don't think it is normal that
                ;; org-contacts updates org-agenda-files in this case, but
                ;; short of duplicating org-check-agenda-files and
                ;; org-remove-files, I don't know how to avoid it.
                ;;
                ;; A side effect of the TODO is that the faulty
                ;; org-contacts-files list never gets updated and thus the
                ;; user is always queried about the missing files when
                ;; org-contacts-db-need-update-p returns true.
                (org-check-agenda-file file))
              (message "Skipped %s removed from org-agenda-files list."
                       (abbreviate-file-name file))
                           (with-current-buffer (org-get-agenda-file-buffer file)
                                 (unless (eq major-mode 'org-mode)
                                 (error "File %s is not in \omegarg-mode'" file))
                                       (setf result
                                           (append result
                                               (org-scan-tags
                                                    'org-contacts-at-point
                                                         contacts-matcher
                                                              todo-only)))))
                                                                (progress-reporter-update progress-reporter (setq i (1+ i))))
                                                                (setf org-contacts-db result
                                                                      org-contacts-last-update (current-time))
                                                                      (progress-reporter-done progress-reporter)))
    org-contacts-db))

(defun org-contacts-at-point (&optional pom)
  "Return the contacts at point-or-marker POM or current position
if nil."
  (setq pom (or pom (point)))
  (org-with-point-at pom
    (list (org-get-heading t) (set-marker (make-marker) pom) (org-entry-properties pom 'all))))

(defun org-contacts-filter (&optional name-match tags-match prop-match)
  "Search for a contact matching any of NAME-MATCH, TAGS-MATCH, PROP-MATCH.
If all match values are nil, return all contacts.

The optional PROP-MATCH argument is a single (PROP . VALUE) cons
cell corresponding to the contact properties.
"
  (if (and (null name-match)
     (null prop-match)
        (null tags-match))
      (org-contacts-db)
    (loop for contact in (org-contacts-db)
      if (or
            (and name-match
               (org-string-match-p name-match
                      (first contact)))
                            (and prop-match
                               (org-find-if (lambda (prop)
                                 (and (string= (car prop-match) (car prop))
                                        (org-string-match-p (cdr prop-match) (cdr prop))))
                                        (caddr contact)))
                                              (and tags-match
                                                 (org-find-if (lambda (tag)
                                                   (org-string-match-p tags-match tag))
                                                   (org-split-string
                                                    (or (cdr (assoc-string "ALLTAGS" (caddr contact))) "") ":"))))
                                                      collect contact)))

(when (not (fboundp 'completion-table-case-fold))
  ;; That function is new in Emacs 24...
  (defun completion-table-case-fold (table &optional dont-fold)
    (lambda (string pred action)
      (let ((completion-ignore-case (not dont-fold)))
      (complete-with-action action table string pred)))))

(defun org-contacts-try-completion-prefix (to-match collection &optional predicate)
  "Custom implementation of \taury-completion'.
This version works only with list and alist and it looks at all
prefixes rather than just the beginning of the string."
  (loop with regexp = (concat "\\b" (regexp-quote to-match))
  with ret = nil
  with ret-start = nil
  with ret-end = nil

  for el in collection
  for string = (if (listp el) (car el) el)

  for start = (when (or (null predicate) (funcall predicate string))
        (string-match regexp string))

        if start
        do (let ((end (match-end 0))
         (len (length string)))
              (if (= end len)
               (return t)
                      (destructuring-bind (string start end)
                         (if (null ret)
                                (values string start end)
                                     (org-contacts-common-substring
                                           ret ret-start ret-end
                                                 string start end))
                                                  (setf ret string
                                                         ret-start start
                                                                ret-end end))))

                                                                finally (return
                                                                 (replace-regexp-in-string "\\\Leftarrow \t\n]*" "" ret))))

(defun org-contacts-compare-strings (s1 start1 end1 s2 start2 end2 &optional ignore-case)
  "Compare the contents of two strings, using tring collection predicate))
  (t nil; operation unsupported
         )))))

(defun org-contacts-display-sort-function (completions)
  "Sort function for contacts display."
  (mapcar (lambda (string)
      (loop with len = (1- (length string))
        for i upfrom 0 to len
          if (memq 'org-contacts-prefix
             (text-properties-at i string))
               do (set-text-properties
                     i (1+ i)
                           (list 'font-lock-face
                               (if (char-equal (aref string i)
                                   (string-to-char " "))
                                   ;; Spaces can't be bold.
                                   'underline
                                         'bold)) string)
                                           else
                                             do (set-text-properties i (1+ i) nil string)
                                               finally (return string)))
                                                 completions))

(defun org-contacts-test-completion-prefix (string collection predicate)
  ;; Prevents \omegarg-find-if' from redefining \phantom{redicate' and going into
  ;; an infinite loop.
  (lexical-let ((predicate predicate))
    (org-find-if (lambda (el)
       (and (or (null predicate) (funcall predicate el))
       (string= string el)))
        collection)))

(defun org-contacts-boundaries-prefix (string collection predicate suffix)
  (list* 'boundaries (completion-boundaries string collection predicate suffix)))

(defun org-contacts-metadata-prefix (string collection predicate)
  '(metadata .
       ((cycle-sort-function . org-contacts-display-sort-function)
             (display-sort-function . org-contacts-display-sort-function))))

(defun org-contacts-complete-group (start end string)
  "Complete text at START from a group.

A group FOO is composed of contacts with the tag FOO."
  (let* ((completion-ignore-case org-contacts-completion-ignore-case)
   (group-completion-p (org-string-match-p
         (concat "^" org-contacts-group-prefix) string)))
    (when group-completion-p
      (let ((completion-list
           (all-completions
                 string
                       (mapcar (lambda (group)
                       (propertize (concat org-contacts-group-prefix group)
                           'org-contacts-group group))
                                 (org-uniquify
                                        (loop for contact in (org-contacts-filter)
                                             nconc (org-split-string
                                                 (or (cdr (assoc-string "ALLTAGS" (caddr contact))) "") ":")))))))
                                                 (list start end
                                                       (if (= (length completion-list) 1)
                                                         ;; We've found the correct group, returns the address
                                                           (lexical-let ((tag (get-text-property 0 'org-contacts-group
                                                           (car completion-list))))
                                                               (lambda (string pred &optional to-ignore)
                                                                     (mapconcat 'identity
                                                                      (loop for contact in (org-contacts-filter
                                                                             nil
                                                                                    tag)
                                                                                           ;; The contact name is always the car of the assoc-list
                                                                                                  ;; returned by \omegarg-contacts-filter'.
                                                                                                         for contact-name = (car contact)
                                                                                                                ;; Grab the first email of the contact
                                                                                                                       for email = (org-contacts-strip-link
                                                                                                                           (or (car (org-contacts-split-property
                                                                                                                                 (or
                                                                                                                                        (cdr (assoc-string org-contacts-email-property
                                                                                                                                          (caddr contact)))
                                                                                                                                                 ""))) ""))
                                                                                                                                                        ;; If the user has an email address, append USER <EMAIL>.
                                                                                                                                                               if email collect (org-contacts-format-email contact-name email))
                                                                                                                                                                ", ")))
                                                                                                                                                                ;; We haven't found the correct group
                                                                                                                                                                (completion-table-case-fold completion-list
                                                                                                                                                                    (not org-contacts-completion-ignore-case))))))))

(defun org-contacts-complete-tags-props (start end string)
  "Insert emails that match the tags expression.

For example: FOO-BAR will match entries tagged with FOO but not
with BAR.

See (org) Matching tags and properties for a complete
description."
  (let* ((completion-ignore-case org-contacts-completion-ignore-case)
   (completion-p (org-string-match-p
   (concat "^" org-contacts-tags-props-prefix) string)))
    (when completion-p
      (let ((result
           (mapconcat
                 'identity
                       (loop for contact in (org-contacts-db)
                           for contact-name = (car contact)
                               for email = (org-contacts-strip-link (or (car (org-contacts-split-property
                                      (or
                                      (cdr (assoc-string org-contacts-email-property
                                         (caddr contact)))
                                         ""))) ""))
                                             for tags = (cdr (assoc "TAGS" (nth 2 contact)))
                                                 for tags-list = (if tags
                                                 (split-string (substring (cdr (assoc "TAGS" (nth 2 contact))) 1 -1) ":")
                                                       '())
                                                           for marker = (second contact)
                                                               if (with-current-buffer (marker-buffer marker)
                                                                (save-excursion
                                                                   (goto-char marker)
                                                                      (let (todo-only)
                                                                           (eval (cdr (org-make-tags-matcher (subseq string 1)))))))
                                                                               collect (org-contacts-format-email contact-name email))
                                                                                     ",")))
                                                                                     (when (not (string= "" result))
                                                                                       ;; return (start end function)
                                                                                         (lexical-let* ((to-return result))
                                                                                             (list start end
                                                                                               (lambda (string pred &optional to-ignore) to-return))))))))

(defun org-contacts-remove-ignored-property-values (ignore-list list)
  "Remove all ignore-list's elements from list and you can use
   regular expressions in the ignore list."
    (org-remove-if (lambda (el)
         (org-find-if (lambda (x)
             (string-match-p x el))
               ignore-list))
                  list))

(defun org-contacts-complete-name (start end string)
  "Complete text at START with a user name and email."
  (let* ((completion-ignore-case org-contacts-completion-ignore-case)
         (completion-list
           (loop for contact in (org-contacts-filter)
           ;; The contact name is always the car of the assoc-list
           ;; returned by \omegarg-contacts-filter'.
           for contact-name = (car contact)

           ;; Build the list of the email addresses which has
           ;; been expired
           for ignore-list = (org-contacts-split-property
              (or (cdr (assoc-string org-contacts-ignore-property
                (caddr contact))) ""))
                ;; Build the list of the user email addresses.
                for email-list = (org-contacts-remove-ignored-property-values
                  ignore-list
                    (org-contacts-split-property
                       (or (cdr (assoc-string org-contacts-email-property
                         (caddr contact))) "")))
                         ;; If the user has email addresses}
#-excursion
          (and (outline-next-heading)
               ;; show the next heading
               (org-flag-heading nil)))))))

(org-no-warnings (defvar date)) ;; unprefixed, from calendar.el
(defun org-contacts-anniversaries (&optional field format)
  "Compute FIELD anniversary for each contact, returning FORMAT.
Default FIELD value is \"BIRTHDAY\".

Format is a string matching the following format specification:

  %h - Heading name
  %l - Link to the heading
  %y - Number of year
  %Y - Number of year (ordinal)"
  (let ((calendar-date-style 'american)
        (entry ""))
    (unless format (setq format org-contacts-birthday-format))
    (loop for contact in (org-contacts-filter)
          for anniv = (let ((anniv (cdr (assoc-string
                                         (or field org-contacts-birthday-property)
                                         (caddr contact)))))
                        (when anniv
                          (calendar-gregorian-from-absolute
                           (org-time-string-to-absolute anniv))))
          ;; Use \deltaiary-anniversary' to compute anniversary.
          if (and anniv (apply 'diary-anniversary anniv))
          collect (format-spec format
                               \langle(?l . ,(org-with-point-at (cadr contact) (org-store-link nil)))
                                 (?h . ,(car contact))
                                 (?y . ,(- (calendar-extract-year date)
                                           (calendar-extract-year anniv)))
                                 (?Y . ,(let ((years (- (calendar-extract-year date)
                                                        (calendar-extract-year anniv))))
                                          (format "%d%s" years (diary-ordinal-suffix years)))))))))

(defun org-completing-read-date (prompt collection
                                        &optional predicate require-match initial-input
                                        hist def inherit-input-method)
  "Like lambda () (org-agenda-skip-if nil \langlenotregexp ,name))))
        (org-agenda-prefix-format (propertize
           "%(org-contacts-icon-as-string)% s%(org-contacts-irc-number-of-unread-messages) "
              'keymap org-contacts-keymap))
        (org-agenda-overriding-header
         (or org-agenda-overriding-header
             (concat "List of contacts matching il address from Wanderlust email.
See \omegarg-contacts-wl-get-from-header-content' for limitations."
  (let ((from (org-contacts-wl-get-from-header-content)))
    (when from
      (list (wl-address-header-extract-realname from)
          (wl-address-header-extract-address from)))))

(defun org-contacts-template-wl-name (&optional return-value)
  "Try to return the contact name for a template from wl.
If not found, return RETURN-VALUE or something that would ask the
user."
  (or (car (org-contacts-wl-get-name-email))
      return-value
      "%^{Name}"))

(defun org-contacts-template-wl-email (&optional return-value)
  "Try to return the contact email for a template from Wanderlust.
If not found return RETURN-VALUE or something that would ask the user."
  (or (cadr (org-contacts-wl-get-name-email))
      return-value
      (concat "%^{" org-contacts-email-property "}p")))

(defun org-contacts-view-send-email (&optional ask)
  "Send email to the contact at point.
If ASK is set, ask for the email address even if there's only one
address."
  (interactive "P")
  (let ((marker (org-get-at-bol 'org-hd-marker)))
    (org-with-point-at marker
      (let ((emails (org-entry-get (point) org-contacts-email-property)))
        (if emails
            (let ((email-list (org-contacts-split-property emails)))
              (if (and (= (length email-list) 1) (not ask))
                  (compose-mail (org-contacts-format-email
                                 (org-get-heading t) emails))
                (let ((email (completing-read "Send mail to which address: " email-list)))
                  (setq email (org-contacts-strip-link email))
                  (org-contacts-check-mail-address email)
                  (compose-mail (org-contacts-format-email (org-get-heading t) email)))))
          (error (format "This contact has no mail address set (no %s property)"
                         org-contacts-email-property)))))))

(defun org-contacts-get-icon (&optional pom)
  "Get icon for contact at POM."
  (setq pom (or pom (point)))
  (catch 'icon
    ;; Use \omegarg-contacts-icon-property'
    (let ((image-data (org-entry-get pom org-contacts-icon-property)))
      (when image-data
        (throw 'icon
               (if (fboundp 'gnus-rescale-image)
                   (gnus-rescale-image (create-image image-data)
                                       (cons org-contacts-icon-size org-contacts-icon-size))
                 (create-image image-data)))))
    ;; Next, try Gravatar
    (when org-contacts-icon-use-gravatar
      (let* ((gravatar-size org-contacts-icon-size)
             (email-list (org-entry-get pom org-contacts-email-property))
             (gravatar
              (when email-list
                (loop for email in (org-contacts-split-property email-list)
                      for gravatar = (gravatar-retrieve-synchronously (org-contacts-strip-link email))
                      if (and gravatar
                              (not (eq gravatar 'error)))
                      return gravatar))))
        (when gravatar (throw 'icon gravatar))))))

(defun org-contacts-irc-buffer (&optional pom)
  "Get the IRC buffer associated with the entry at POM."
  (setq pom (or pom (point)))
  (let ((nick (org-entry-get pom org-contacts-nickname-property)))
    (when nick
      (let ((buffer (get-buffer nick)))
        (when buffer
          (with-current-buffer buffer
            (when (eq major-mode 'erc-mode)
              buffer)))))))

(defun org-contacts-irc-number-of-unread-messages (&optional pom)
  "Return the number of unread messages for contact at POM."
  (when (boundp 'erc-modified-channels-alist)
    (let ((number (cadr (assoc (org-contacts-irc-buffer pom) erc-modified-channels-alist))))
      (if number
          (format (concat "%3d unread message" (if (> number 1) "s" " ") " ") number)
        (make-string 21 ? )))))

(defun org-contacts-view-switch-to-irc-buffer ()
  "Switch to the IRC buffer of the current contact if it has one."
  (interactive)
  (let ((marker (org-get-at-bol 'org-hd-marker)))
    (org-with-point-at marker
      (switch-to-buffer-other-window (org-contacts-irc-buffer)))))

(defun org-contacts-completing-read-nickname (prompt collection
                                                     &optional predicate require-match initial-input
                                                     hist def inherit-input-method)
  "Like ent]
\\[universal-argument], prompts for a contact name and a buffer where to export.

If the function is not called interactively, all parameters are
passed to \omegarg-contacts-export-as-vcard-internal'."
  (interactive "P")
  (when (called-interactively-p 'any)
    (cl-psetf name
         (when name
                (read-string "Contact name: "
                    (first (org-contacts-at-point))))
                         file
                              (when (equal name '(16))
                                     (read-file-name "File: " nil org-contacts-vcard-file))
                                          to-buffer
                                               (when (equal name '(64))
                                                      (read-buffer "Buffer: "))))
  (org-contacts-export-as-vcard-internal name file to-buffer))

(defun org-contacts-export-as-vcard-internal (&optional name file to-buffer)
  "Export all contacts matching NAME as VCard 3.0.
If TO-BUFFER is nil, the content is written to FILE or
\omegarg-contacts-vcard-file'.  If TO-BUFFER is non-nil, the buffer
is created and the VCard is written into that buffer."
  (let* ((filename (or file org-contacts-vcard-file))
   (buffer (if to-buffer
        (get-buffer-create to-buffer)
           (find-file-noselect filename))))
    (message "Exporting...")
    (set-buffer buffer)
    (let ((inhibit-read-only t)) (erase-buffer))
    (fundamental-mode)
    (when (fboundp 'set-buffer-file-coding-system)
      (set-buffer-file-coding-system coding-system-for-write))
    (loop for contact in (org-contacts-filter name)
      do (insert (org-contacts-vcard-format contact)))
    (if to-buffer
    (current-buffer)
      (progn (save-buffer) (kill-buffer)))))

(defun org-contacts-show-map (&optional name)
  "Show contacts on a map.
Requires google-maps-el."
  (interactive)
  (unless (fboundp 'google-maps-static-show)
    (error "\omegarg-contacts-show-map' requires \gammaoogle-maps-el'"))
  (google-maps-static-show
   :markers
   (loop
    for contact in (org-contacts-filter name)
    for addr = (cdr (assoc-string org-contacts-address-property (caddr contact)))
    if addr
    collect (cons (list addr) (list :label (string-to-char (car contact)))))))

(defun org-contacts-strip-link (link)
  "Remove brackets, description, link type and colon from an org
link string and return the pure link target."
   (let (startpos colonpos endpos)
     (setq startpos (string-match (regexp-opt '("[[tel:" "[[mailto:")) link))
     (if startpos
         (progn
            (setq colonpos (string-match ":" link))
            (setq endpos (string-match "\\]" link))
            (if endpos (substring link (1+ colonpos) endpos) link))
         (progn
            (setq startpos (string-match "mailto:" link))
            (setq colonpos (string-match ":" link))
            (if startpos (substring link (1+ colonpos)) link)))))

(defun org-contacts-split-property (string &optional separators omit-nulls)
  "Custom version of \sigmaplit-string'.
Split a property STRING into sub-strings bounded by matches
for SEPARATORS but keep Org links intact.

The beginning and end of STRING, and each match for SEPARATORS, are
splitting points.  The substrings matching SEPARATORS are removed, and
the substrings between the splitting points are collected as a list,
which is returned.

If SEPARATORS is non-nil, it should be a regular expression
matching text which separates, but is not part of, the
substrings.  If nil it defaults to \omegarg-contacts-property-values-separators',
normally \"[,; \f\t\n\r\v]+\", and OMIT-NULLS is forced to t.

If OMIT-NULLS is t, zero-length substrings are omitted from the list \(so
that for the default value of SEPARATORS leading and trailing whitespace
are effectively trimmed).  If nil, all zero-length substrings are retained."
  (let* ((omit-nulls (if separators omit-nulls t))
   (rexp (or separators org-contacts-property-values-separators))
    (inputlist (split-string string rexp omit-nulls))
     (linkstring "")
      (bufferstring "")
       (proplist (list "")))
    (while inputlist
      (setq bufferstring (pop inputlist))
      (if (string-match "\\[\\[" bufferstring)
          (progn
            (setq linkstring (concat bufferstring " "))
            (while (not (string-match "\\]\\]" bufferstring))
              (setq bufferstring (pop inputlist))
              (setq linkstring (concat  linkstring bufferstring " ")))
            (setq proplist (cons (org-trim linkstring) proplist)))
        (setq proplist (cons bufferstring proplist))))
    (cdr (reverse proplist))))

(provide 'org-contacts)

;;; org-contacts.el ends here
#+end_src
** "Normal" emacs configuration
