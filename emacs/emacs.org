#+TITLE: Making Emacs Work For Me
#+AUTHOR: Victor Santos (vct)
#+EMAIL: victor.phb@gmail.com

* Configuring Emacs using literate programming

  This is another attempt at creating a readable and maintainable Emacs
  configuration. I'm hopeful that using Org-Babel and a literate
  programming style will help tame the spaghettification.

* Start up

  Start with the scratch buffer; no start up screen.

  #+NAME: startup
  #+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  #+END_SRC

* General configuration
  Here I store configuration common to all files.
** CUA mode
   #+NAME: general-configuration
   #+BEGIN_SRC emacs-lisp
   (cua-mode t)
   #+END_SRC
** Backup files
   Store all backup and autosave files in the tmp dir
   #+name: general-configuration
   #+begin_src emacs-lisp
   (setq backup-directory-alist
     `((".*" . ,temporary-file-directory)))
   (setq auto-save-file-name-transforms
     `((".*" ,temporary-file-directory t)))
   #+end_src
** History
   #+name: general-configuration
   #+begin_src emacs-lisp
   (setq savehist-file "~/.emacs.d/savehist")
   (savehist-mode 1)
   (setq history-length t)
   (setq history-delete-duplicates t)
   (setq savehist-save-minibuffer-history 1)
   (setq savehist-additional-variables
     '(kill-ring
        search-ring
        regexp-search-ring))
   #+end_src
** Save cursor position across sessions
   Next time you open a file, the cursor will be at the position you last opened it.
   #+name: general-configuration
   #+begin_src emacs-lisp
   (require 'saveplace)
   (setq-default save-place t)
   #+end_src
** Change "yes or no" to "y or n"
   Thanks to [[http://pages.sachachua.com/.emacs.d/Sacha.html#unnumbered-16][Sacha Chua]] for this =)
   #+NAME: general-configuration
   #+BEGIN_SRC emacs-lisp
   (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
* Package Management

  For installing packages using ELPA, MELPA, Marmalade.

  #+name: package-management
  #+begin_src emacs-lisp
  (when (>= emacs-major-version 24)
    (require 'package)
    (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
    (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
    (package-initialize)
  )
  #+end_src

* Path

  Add custom paths to emacs.

  #+name: package-management
  #+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/custom/") ; Load custom libraries
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes") ; extra theme path
  #+end_src

* Graphics and looks
** Color theme
   ujelly theme is awesome!

   #+name: look-and-feel
   #+BEGIN_SRC emacs-lisp
   (load-theme 'ujelly t)
   #+END_SRC
** Font

   I like [[http://www.levien.com/type/myfonts/inconsolata.html][Inconsolata]], but it doesn't support a wide range of Unicode
   characters, so I fall back on [[http://dejavu-fonts.org/wiki/Main_Page][DejaVu Sans]] for those.

   #+name: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (set-face-attribute 'default nil
                         :family "Inconsolata"
                         :height 130
                         :weight 'normal
                         :width 'normal)

    (set-face-attribute 'italic nil
                         :family "DejaVu Sans Mono"
                         :height 115
                         :weight 'normal
                         :width 'normal)

     (when (functionp 'set-fontset-font)
       (set-fontset-font "fontset-default"
                         'unicode
                         (font-spec :family "DejaVu Sans Mono"
                                    :width 'normal
                                    :size 12.4
                                    :weight 'normal)))

   #+END_SRC

** Reduce clutter

   Remove the toolbar. It's ugly and I never use it. Also remove the
   scroll bars and menu bar; below, I set up the fringe to show my position in a
   buffer.

   #+name: look-and-feel
   #+BEGIN_SRC emacs-lisp
   (tool-bar-mode -1)
   (toggle-scroll-bar -1)
   (menu-bar-mode -1)
   #+END_SRC

** Fringe decorations

   [[http://www.emacswiki.org/emacs/TheFringe][The fringe]] is the vertical region at the right and left of the
   buffer. Emacs lets you customize it of course.

   Here I set up buffer position in the fringe.

   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
   (setq-default indicate-buffer-boundaries 'left)
   (setq-default indicate-empty-lines +1)
   #+END_SRC

** Mode line

   Extracted from http://emacs-fu.blogspot.com.br/2011/08/customizing-mode-line.html

   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
   (setq-default mode-line-format
     (list
       ;; the buffer name; the file name as a tool tip
       '(:eval (propertize "%b " 'face 'font-lock-keyword-face
           'help-echo (buffer-file-name)))
    
       ;; line and column
       "(" ;; '%02' to set to 2 chars at least; prevents flickering
         (propertize "%02l" 'face 'font-lock-type-face) ","
         (propertize "%02c" 'face 'font-lock-type-face) 
       ") "
    
       ;; relative position, size of file
       "["
       (propertize "%p" 'face 'font-lock-constant-face) ;; % above top
       "/"
       (propertize "%I" 'face 'font-lock-constant-face) ;; size
       "] "
    
       ;; the current major mode for the buffer.
       "["
    
       '(:eval (propertize "%m" 'face 'font-lock-string-face
                 'help-echo buffer-file-coding-system))
       "] "
    
    
       "[" ;; insert vs overwrite mode, input-method in a tooltip
       '(:eval (propertize (if overwrite-mode "Ovr" "Ins")
                 'face 'font-lock-preprocessor-face
                 'help-echo (concat "Buffer is in "
                              (if overwrite-mode "overwrite" "insert") " mode")))
    
       ;; was this buffer modified since the last save?
       '(:eval (when (buffer-modified-p)
                 (concat ","  (propertize "Mod"
                                'face 'font-lock-warning-face
                                'help-echo "Buffer has been modified"))))
    
       ;; is this buffer read-only?
       '(:eval (when buffer-read-only
                 (concat ","  (propertize "RO"
                                'face 'font-lock-type-face
                                'help-echo "Buffer is read-only"))))  
       "] "
    
       ;; add the time, with the date and the emacs uptime in the tooltip
       '(:eval (propertize (format-time-string "%H:%M")
                 'help-echo
                 (concat (format-time-string "%c; ")
                         (emacs-uptime "Uptime:%hh"))))
       " --"
       ;; i don't want to see minor-modes; but if you want, uncomment this:
       ;; minor-mode-alist  ;; list of minor modes
       "%-" ;; fill with '-'
       ))
   #+END_SRC

* Org Mode
** General Configuration
*** Clean view of files
    #+name: org-config
    #+begin_src emacs-lisp
    (defun vct-org-visual-line ()
      (setq visual-line-fringe-indicators '(nil right-curly-arrow))
      (turn-on-visual-line-mode)
    )
    (add-hook 'org-mode-hook 'vct-org-visual-line)
    #+end_src
** LaTeX hooks
*** Use CDLaTeX to enter math
   #+name: org-config
   #+begin_src emacs-lisp
   (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
   #+end_src

*** Scale LaTeX previews
   #+name: org-config
   #+begin_src emacs-lisp
   (defun vct-org-hooks ()
       (plist-put org-format-latex-options :scale 1.4)
       (org-bullets-mode 1)
    )
   (add-hook 'org-mode-hook 'vct-org-hooks)
   #+end_src
** Org-Babel
*** Fontifying source blocks

    Enable syntax highlighting in src blocks.

    #+name: org-config
    #+BEGIN_SRC emacs-lisp
      (setq-default org-src-fontify-natively t)
    #+END_SRC

* Configuration file layout

  Here I define the emacs.el file that gets generated by the code in
  this org file.

  #+BEGIN_SRC emacs-lisp :tangle emacs.symlink :noweb no-export :exports code
    ;;;; Do not modify this file by hand.  It was automatically generated
    ;;;; from `emacs.org` in the same directory. See that file for more
    ;;;; information.

    <<startup>>
    <<package-management>>
    <<general-configuration>>
    <<environment>>
    <<tools>>
    <<customize-config>>
    <<look-and-feel>>
    <<formatting>>
    <<programming-setup>>
    <<auto-complete>>
    <<global-keys>>
    <<global-navigation>>
    <<org-config>>
    <<libraries>>
  #+END_SRC
