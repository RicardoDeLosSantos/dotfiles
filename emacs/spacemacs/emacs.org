* spacemacs configuration

This file is loaded by Spacemacs at startup. It must be stored in the home directory.

** Configuration Layers

Begin layers configuration
#+begin_src emacs-lisp :tangle spacemacs.symlink
(defun dotspacemacs/layers ()
  (setq-default
#+end_src

List of additional paths where to look for configuration layers. Paths must have a trailing slash (i.e. =~/.mycontribs/=)
#+begin_src emacs-lisp :tangle spacemacs.symlink
;dotspacemacs-configuration-layer-path '("~/.spacemacs_private/")
#+end_src

List of configuration layers to load. If it is the symbol =all= instead of a list then all discovered layers will be installed.
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-configuration-layers '(
#+end_src

Example of useful layers you may want to use right away.
Uncomment some layer names and press <SPC f e R> (Vim style) or
<M-m f e R> (Emacs style) to install them.
#+begin_src emacs-lisp :tangle spacemacs.symlink
     ;auto-completion
     better-defaults
     emacs-lisp
     git
     github
     org
     latex
     version-control
     python
#+end_src

Close =dotspacemacs-configuration-layers=
#+begin_src emacs-lisp :tangle spacemacs.symlink
     )
#+end_src

List of additional packages that will be installed without being wrapped in a layer. If you need some configuration for these packages then consider to create a layer, you can also put the configuration in `dotspacemacs/config'.
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-additional-packages '(
#+end_src

Include here the names of the additional layers
#+begin_src emacs-lisp :tangle spacemacs.symlink
tabbar 
remember 
cdlatex 
google-translate 
web-mode 
vimish-fold
#+end_src

Close =dotspacemacs-additional-packages=
#+begin_src emacs-lisp :tangle spacemacs.symlink
)
#+end_src

#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-excluded-packages '(
#+end_src

list of packages and/or extensions that will not be install and loaded.
#+begin_src emacs-lisp :tangle spacemacs.symlink
org-bullets
#+end_src

#+begin_src emacs-lisp :tangle spacemacs.symlink
)
#+end_src
If non-nil spacemacs will delete any orphan packages, i.e. packages that are declared in a layer which is not a member of the list =dotspacemacs-configuration-layers=
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-delete-orphan-packages t
#+end_src

End layers configuration
#+begin_src emacs-lisp :tangle spacemacs.symlink
  )
)
#+end_src

** Initialization function

This function is called at the very startup of Spacemacs initialization before layers configuration.

#+begin_src emacs-lisp :tangle spacemacs.symlink
(defun dotspacemacs/init ()
#+end_src

Function for setting visual line mode
#+begin_src emacs-lisp :tangle spacemacs.symlink
(defun vct/set-visual-mode-fringe-indicators ()
  (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
  (visual-line-mode 1)
)
#+end_src

This setq-default sexp is an exhaustive list of all the supported spacemacs settings.
#+begin_src emacs-lisp :tangle spacemacs.symlink
(setq-default
#+end_src

- Either =vim= or =emacs=. Evil is always enabled but if the variable is =emacs= then the =holy-mode= is enabled at startup.
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-editing-style 'vim
#+end_src

If non nil output loading progress in `*Messages*' buffer.
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-verbose-loading nil
#+end_src

Specify the startup banner. Default value is `official', it displays the official spacemacs logo. An integer value is the index of text banner, `random' chooses a random text banner in `core/banners' directory. A string value must be a path to an image format supported by your Emacs build. If the value is nil then no banner is displayed.
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-startup-banner 'official
#+end_src


List of items to show in the startup buffer. If nil it is disabled. Possible values are: `recents' `bookmarks' `projects'."
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-startup-lists '(recents projects)
#+end_src

#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-themes '(
#+end_src

List of themes, the first of the list is loaded when spacemacs starts. Press <SPC> T n to cycle to the next theme in the list (works great with 2 themes variants, one dark and one light)
#+begin_src emacs-lisp :tangle spacemacs.symlink
spacemacs-dark
solarized-light
solarized-dark
spacemacs-light
monokai
leuven
zenburn
#+end_src
                       
Close =dotspacemacs-themes=
#+begin_src emacs-lisp :tangle spacemacs.symlink
)
#+end_src


If non nil the cursor color matches the state color.
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-colorize-cursor-according-to-state t
#+end_src

#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-default-font '(
#+end_src

Default font. `powerline-scale' allows to quickly tweak the mode-line size to make separators look not too crappy.
#+begin_src emacs-lisp :tangle spacemacs.symlink
"Inconsolata for Powerline"
:size 15
:weight normal
:width normal
:powerline-scale 1.3
#+end_src

close =dotspacemacs-default-font=
#+begin_src emacs-lisp :tangle spacemacs.symlink
)
#+end_src

The leader key
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-leader-key "SPC"
#+end_src

The leader key accessible in `emacs state' and `insert state'
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-emacs-leader-key "M-m"
#+end_src

Major mode leader key is a shortcut key which is the equivalent of pressing `<leader> m`. Set it to `nil` to disable it.
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-major-mode-leader-key ","
#+end_src

Major mode leader key accessible in `emacs state' and `insert state'
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-major-mode-emacs-leader-key "C-M-m"
#+end_src

The command key used for Evil commands (ex-commands) and Emacs commands (M-x). By default the command key is `:' so ex-commands are executed like in Vim with `:' and Emacs commands are executed with `<leader> :'.
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-command-key ":"
#+end_src

Location where to auto-save files. Possible values are `original' to auto-save the file in-place, `cache' to auto-save the file to another file stored in the cache directory and `nil' to disable auto-saving. Default value is `cache'.
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-auto-save-file-location 'cache
#+end_src

If non nil then `ido' replaces `helm' for some commands. For now only `find-files' (SPC f f) is replaced.
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-use-ido nil
#+end_src

 If non nil the paste micro-state is enabled. When enabled pressing `p` several times cycle between the kill ring content.
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-enable-paste-micro-state nil
#+end_src

 Guide-key delay in seconds. The Guide-key is the popup buffer listing the commands bound to the current keystrokes.
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-guide-key-delay 0.4
#+end_src

If non nil a progress bar is displayed when spacemacs is loading. This may increase the boot time on some systems and emacs builds, set it to nil to boost the loading time.
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-loading-progress-bar t
#+end_src

If non nil the frame is fullscreen when Emacs starts up. (Emacs 24.4+ only)
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-fullscreen-at-startup nil
#+end_src


If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen. Use to disable fullscreen animations in OSX."
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-fullscreen-use-non-native nil
#+end_src


If non nil the frame is maximized when Emacs starts up. Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil. (Emacs 24.4+ only)
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-maximized-at-startup nil
#+end_src

A value from the range (0..100), in increasing opacity, which describes the transparency level of a frame when it's active or selected. Transparency can be toggled through `toggle-transparency'.
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-active-transparency 90
#+end_src

 A value from the range (0..100), in increasing opacity, which describes the transparency level of a frame when it's inactive or deselected. Transparency can be toggled through `toggle-transparency'.
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-inactive-transparency 90
#+end_src


If non nil unicode symbols are displayed in the mode line.
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-mode-line-unicode-symbols t
#+end_src

If non nil smooth scrolling (native-scrolling) is enabled. Smooth scrolling overrides the default behavior of Emacs which recenters the point when it reaches the top or bottom of the screen.
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-smooth-scrolling t
#+end_src

If non-nil smartparens-strict-mode will be enabled in programming modes.
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-smartparens-strict-mode nil
#+end_src

Select a scope to highlight delimiters. Possible value is `all', `current' or `nil'. Default is `all'
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-highlight-delimiters 'all
#+end_src

If non nil advises quit functions to keep server open when quitting.
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-persistent-server nil
#+end_src


List of search tool executable names. Spacemacs uses the first installed tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
#+end_src

The default package repository used if no explicit repository has been
specified with an installed package.
Not used for now.
#+begin_src emacs-lisp :tangle spacemacs.symlink
dotspacemacs-default-package-repository nil
#+end_src

#+begin_src emacs-lisp :tangle spacemacs.symlink
)
#+end_src
  
Close =dotspacemacs/init=
#+begin_src emacs-lisp :tangle spacemacs.symlink
)
#+end_src

** User initialization 

This function is called at the very end of Spacemacs initialization after layers configuration.
#+begin_src emacs-lisp :tangle spacemacs.symlink
(defun dotspacemacs/user-config ()
#+end_src

Disable line highlighting
#+begin_src emacs-lisp :tangle spacemacs.symlink
(global-hl-line-mode -1)
#+end_src

**** Fix visual lines navigation

  From https://github.com/syl20bnr/spacemacs/pull/1446. Make evil-mode up/down operate in screen lines instead of logical lines..
- in normal state...
#+begin_src emacs-lisp :tangle spacemacs.symlink
(define-key evil-normal-state-map "j" 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "<down>") 'evil-next-visual-line)
(define-key evil-normal-state-map "k" 'evil-previous-visual-line)
(define-key evil-normal-state-map (kbd "<up>") 'evil-previous-visual-line)
#+end_src
- ... and also in visual mode
#+begin_src emacs-lisp :tangle spacemacs.symlink
(define-key evil-visual-state-map "j" 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "<down>") 'evil-next-visual-line)
(define-key evil-visual-state-map "k" 'evil-previous-visual-line)
(define-key evil-normal-state-map (kbd "<up>") 'evil-previous-visual-line)
#+end_src

**** Command-line abbreviations

Nice abbreviations for people like me who forget sometimes and keep pressing Shift key while typing.

#+begin_src emacs-lisp :tangle spacemacs.symlink
(eval-after-load 'evil-ex '(evil-ex-define-cmd "W[rite]" 'save-buffer))
(eval-after-load 'evil-ex '(evil-ex-define-cmd "Wq" 'evil-save-and-close))
(eval-after-load 'evil-ex '(evil-ex-define-cmd "wQ" 'evil-save-and-close))
(eval-after-load 'evil-ex '(evil-ex-define-cmd "WQ" 'evil-save-and-close))
#+end_src

Add elisp script folder to emacs' PATH
#+begin_src emacs-lisp :tangle spacemacs.symlink
(add-to-list 'load-path "~/.elisp/")
(let ((default-directory "~/.elisp/"))
  (normal-top-level-add-subdirs-to-load-path))
#+end_src

Enable heartbeat-cursor mode
#+begin_src emacs-lisp :tangle spacemacs.symlink
(load "heartbeat-cursor.el")
(heartbeat-cursor-mode t)
#+end_src

Mail configuration 
#+begin_src emacs-lisp :tangle spacemacs.symlink
(load "mu4e-config.el")
#+end_src

**** Web mode configuration

Use web-mode for editing plain HTML, CSS and JavaScript
#+begin_src emacs-lisp :tangle spacemacs.symlink
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.js?\\'" . web-mode))
#+end_src

Hooks
#+begin_src emacs-lisp :tangle spacemacs.symlink
(defun my-web-mode-hook ()
  "Hooks for Web mode."
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-script-padding 2)
  (setq web-mode-enable-auto-pairing t)
  (setq web-mode-enable-css-colorization t)
  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-enable-current-column-highlight t)
  (setq web-mode-ac-sources-alist
        '(("css" . (ac-source-css-property))
          ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
)
(add-hook 'web-mode-hook  'my-web-mode-hook)
(add-hook 'web-mode-hook (lambda ()(vimish-fold-mode t)))
#+end_src
**** GTD configuration
I keep almost everything in one big org file.
#+begin_src emacs-lisp :tangle spacemacs.symlink
(defvar org-gtd-file "~/1.documents/0.annotations/0.organizer.org")
#+end_src

I open my gtd file when I hit C-c g
#+begin_src emacs-lisp :tangle spacemacs.symlink
(defun gtd () (interactive) (find-file org-gtd-file))
#+end_src

Open GTD file hitting SPC c g
#+begin_src emacs-lisp :tangle spacemacs.symlink
(evil-leader/set-key "cg" 'gtd)
#+end_src

**** Org mode hooks

All org files are better visualized with long lines!
#+begin_src emacs-lisp :tangle spacemacs.symlink
(add-hook 'org-mode-hook 'vct/set-visual-mode-fringe-indicators)
#+end_src

Speedup insertion of LaTeX environments
#+begin_src emacs-lisp :tangle spacemacs.symlink
(add-hook 'org-mode-hook 'turn-on-org-cdlatex)
#+end_src

For updating dynamic blocks
#+begin_src emacs-lisp :tangle spacemacs.symlink
(defun org-dblock-write:inc-file (params) 
  (let ((file (plist-get params :file))) 
    (insert (concat "#+INCLUDE: " (get-path-dynamically)))))
(add-hook 'org-export-before-processing-hook (lambda (backend) (org-update-all-dblocks)))
#+end_src

General configuration for org-mode
#+begin_src emacs-lisp :tangle spacemacs.symlink
(add-hook 'org-mode-hook (lambda () (load "vct-org-hooks.el")))
#+end_src

**** LaTeX hooks

All .tex files are LaTeX
#+begin_src emacs-lisp :tangle spacemacs.symlink
(add-to-list 'auto-mode-alist '("\\`*.tex\\'" . LaTeX-mode))
#+end_src

Enable long lines
#+begin_src emacs-lisp :tangle spacemacs.symlink
(add-hook 'LaTeX-mode-hook 'vct/set-visual-mode-fringe-indicators)
#+end_src

Makes AucTeX using pdflatex instead of latex
#+begin_src emacs-lisp :tangle spacemacs.symlink
(setq-default TeX-PDF-mode t)
#+end_src

Titles with normal size in LaTeX, and less bizarre colors
#+begin_src emacs-lisp :tangle spacemacs.symlink
(setq font-latex-fontify-sectioning 'color)
#+end_src

close =dotspacemacs/user-config=
#+begin_src emacs-lisp :tangle spacemacs.symlink
)
#+end_src

# Local Variables:
# mode: org
# End:


