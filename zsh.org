#+title: zsh configuration

Zsh is a powerful shell that operates as both an interactive shell and as a scripting language interpreter. While being compatible with Bash (not by default, only if issuing =emulate sh=), it offers many advantages such as:
  - Efficiency;
  - Improved tab completion;
  - Improved globbing;
  - Improved array handling;
  - Fully customisable.
** =$PATH= configuration

Set values of $PATH. The options chosen here were:
  -g: any resulting parameter will not be restricted to local
      scope.
  -U: Remove duplicates - keep only the first occurrence of each duplicated
      value.
#+begin_src sh :tangle zsh/.zshrc :padline no
typeset -gU path
#+end_src

*** Set special folders
**** 0.sandbox
Unprocessed items that don’t have a place yet in here. It is a temporary folder for files you're messing around with but don't need to save long-term. This may be items like software installers you’ve downloaded, files sent to you from colleagues, random text clippings and testing scripts. Files I decide I want to keep graduate from =0.sandbox= to =1.docs=. This folder must be emptied everyday. To avoid procrastination, resulting in a completely cluttered folder, you can keep a 'janitor' script, deleting its contents regularly.
#+begin_src sh :tangle zsh/.zshrc :padline no
SANDBOX=$HOME/0.sandbox/
#+end_src

**** 1.documents
Is the big kahuna(*) of all the six folders. It's the place where all the working files for your currently in-progress tasks, projects and clients go. Each project gets its own unique folder. You may have many sub-folders in this folder, but don't go deeper than 3 subfolders. This directory changes often and frequently, so you must clean it regularly. Because of this most of the files here are kept under github/gitlab control.

(*) Kahuna is a Hawaiian word, defined in Pukui & Elbert (1986) as a "priest, sorcerer, magician, wizard, minister, expert in any profession". (See also Ancient Hawaii.) Forty types of kahuna are listed in the book Tales from the Night Rainbow.
#+begin_src sh :tangle zsh/.zshrc :padline no
DOCS=$HOME/1.documents/
#+end_src

**** 2.archive
Completed projects, general reference items, and anything else which is important and you might want to look at again go here. From here you can create aliases for the default folder from your system, like 'Books' or 'Pictures'.  The files here don't change much if ever, and so you can back them up on a different (less frequent) schedule. Therefore I elected this folder to be actually a symbolic link to my Dropbox folder. 
#+begin_src sh :tangle zsh/.zshrc :padline no
ARCHIVE=$HOME/2.archive/
#+end_src

**** opt
Third-party software, not present among the official packages.
#+begin_src sh :tangle zsh/.zshrc :padline no
OPT=$HOME/opt
#+end_src
*** Set pathdirs
#+begin_src sh :tangle zsh/.zshrc :padline no
pathdirs=(
$HOME/.npm/bin
$HOME/.bin
$OPT/bin
$OPT/SageMath
)
path=($path $pathdirs)
#+end_src
** Antigen
#+begin_src sh :tangle zsh/.zshrc :padline no
source ${HOME}/.antigen/antigen.zsh
#+end_src

Load the oh-my-zsh's library.
#+begin_src sh :tangle zsh/.zshrc :padline no
antigen use oh-my-zsh
#+end_src

Bundles from the default repo (robbyrussell's oh-my-zsh).
#+begin_src sh :tangle zsh/.zshrc :padline no
antigen bundle git
antigen bundle pip
antigen bundle command-not-found
#+end_src

Syntax highlighting bundle.
#+begin_src sh :tangle zsh/.zshrc :padline no
antigen bundle zsh-users/zsh-syntax-highlighting
#+end_src

Load the theme.
#+begin_src sh :tangle zsh/.zshrc :padline no
antigen theme agnoster
#+end_src

Tell antigen that you're done.
#+begin_src sh :tangle zsh/.zshrc :padline no
antigen apply
#+end_src
** General configuration
*** Colored ls
#+begin_src sh :tangle zsh/.zshrc :padline no
eval `dircolors /home/santos/.dircolors-solarized/dircolors.256dark`
#+end_src
*** Command completion
#+begin_src sh :tangle zsh/.zshrc :padline no
autoload -U compinit
compinit
#+end_src
*** History
#+begin_src sh :tangle zsh/.zshrc :padline no
export HISTSIZE=10000
export SAVEHIST=10000
export HISTFILE=~/.zsh_history
#+end_src
*** Aliases
**** Archive Extracter
Linux provides various tools for archiving and compressing files such as zip, bzip, gzip, tar, rar etc. There are more tools that are not native to Linux, but provide good archiving and compressing abilities. With such a large number of tools at hand, sometimes it becomes difficult to remember all the commands. 'atool' allows you to manage these different file archives with a single command.
#+begin_src sh :tangle zsh/.zshrc :padline no
alias ae='aunpack' # ae = mnemonic for Archive Extracter
#+end_src
**** Misc
#+begin_src sh :tangle zsh/.zshrc :padline no
alias df="df -H"
alias du="du -ch"
alias ls="ls --color=auto"
alias glog="git log --graph --oneline --decorate --date-order --color --boundary"
alias lh='ls -l .??*'
alias lhd='ls -ld .??*'

man() {
    env \
        LESS_TERMCAP_mb=$(printf "\e[1;31m") \
        LESS_TERMCAP_md=$(printf "\e[1;31m") \
        LESS_TERMCAP_me=$(printf "\e[0m") \
        LESS_TERMCAP_se=$(printf "\e[0m") \
        LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
        LESS_TERMCAP_ue=$(printf "\e[0m") \
        LESS_TERMCAP_us=$(printf "\e[1;32m") \
            man "$@"
}

export ARCHFLAGS="-arch x86_64"
setopt HIST_IGNORE_DUPS
#+end_src

**** Solves GREP problem
#+begin_src sh :tangle zsh/.zshrc :padline no
alias grep="/usr/bin/grep $GREP_OPTIONS"
unset GREP_OPTIONS
#+end_src
**** Preferred editor for local and remote sessions
#+begin_src sh :tangle zsh/.zshrc :padline no
if [[ -n $SSH_CONNECTION ]]; then
   export EDITOR='vi'
else
   export EDITOR='vim'
fi
#+end_src

**** For sagemath
#+begin_src sh :tangle zsh/.zshrc :padline no
alias sagenb="env SAGE_BROWSER=firefox sage -notebook"
#+end_src
**** LaTeX
TeXlive does not allow me to run bibtex on /tmp; to avoid this, set this variable
#+begin_src sh :tangle zsh/.zshrc :padline no
export openout_any=a
#+end_src
**** History search
Show only past commands beginning with the current input
#+begin_src sh :tangle zsh/.zshrc :padline no
[[ -n "${key[PageUp]}"   ]]  && bindkey  "${key[PageUp]}"    history-beginning-search-backward
[[ -n "${key[PageDown]}" ]]  && bindkey  "${key[PageDown]}"  history-beginning-search-forward
#+end_src
**** Pacman utilities
***** List packages installed explicitly by the user
#+begin_src sh :tangle zsh/.zshrc :padline no
lspacuser() {
    pacman -Qei | awk '/^Name/ { name=$3 } /^Groups/ { if ( $3 != "base" && $3 != "base-devel" ) { print name } }'
}
#+end_src
***** List packages installed from AUR
#+begin_src sh :tangle zsh/.zshrc :padline no
lspacaur() {
   pacman -Qqm
}
#+end_src

