#!/bin/bash
# bootstrap files to its places.

# Parse command line arguments
script_name="$0"
usage () {
    echo "Usage: $script_name" 1>&2;
    exit 1;
}

# Use > 1 to consume two arguments per pass in the loop (e.g. each argument has
# a corresponding value to go with it). Use > 0 to consume one or more arguments
# per pass in the loop (e.g. some arguments don't have a corresponding value to
# go with it).
while [[ $# > 0 ]]
do
  key="$1"

  case $key in
    -f|--force)
      force=true
      shift # past argument
      ;;
    -o|--overwrite)
      force=true
      shift # past argument
      ;;
    -h|--help)
      usage
      shift # past argument
      ;;
    -v|--verbose)
      verbose=true
      shift # past argument
      ;;
    *)
      # No options
      ;;
  esac
  shift # past argument or value
done

DOTFILES="`pwd`"
MAX_DEPTH=3

# Set this to the location of your emacs executable
EMACSCMD="`which emacs`"

# Tangle a single .org file with org-mode
tangle () {
  orig="$1"
  dest=`pwd`
  echo "File: $orig"
  $EMACSCMD -nw --batch --eval "
  (progn
    (require 'org-install)
    (find-file (expand-file-name \"$orig\" \"$dest\"))
    (org-babel-tangle)
    (kill-buffer))" 2>&1 | grep "Tangled"
}


# Remove broken links from HOME directory
removebrokenlinks()
{
  if [[ "$verbose" == true ]]; then
    echo "*** Removing broken symlinks from $HOME ***"
  fi
  find $HOME -maxdepth 1 -name ".*" -type l | while read f; do if [ ! -e "$f"  ]; then rm -f "$f"; fi; done
}

set -e
echo ''

info () {
    printf "\r\033[0;34m$1\033[0m\n"
}

user () {
    printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
    printf "\r\033[2K  [\033[0;32m  OK  \033[0m] $1\n"
}

fail () {
    printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
    echo ''
    exit
}

link_files () {
    ln -s $1 $2
    success "linked $1 to $2"
}

install_dotfiles () {
  info 'installing dotfiles'

  backup_all=false
  skip_all=false

  for source in `find $DOTFILES -maxdepth $MAX_DEPTH -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]
    then
      backup=false
      skip=false

      if [ "$force" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi
    else
        link_files $source $dest
    fi
  done
}

# Tangle org-mode files
for org_file in `find $DOTFILES -maxdepth $MAX_DEPTH -name \*.org`
do
  if [[ "$org_file" != *"README"* ]]; then # Exclude README.org.com.br/
    tangle "$org_file"
  fi
done

install_dotfiles

#echo ''
#printf "\033[0;31mDone!\033[0m \n"

# vim: set fdm=marker fmr={{{,}}} ft=sh:
